val newCList = \e.
    let val a = new [] in
    a := [e,a];
    a;;

-- complete the following functions

val insert = \e. \a.
      let val b = new [] in
      case !a of {
      [e', a'] ->
      b := [e, a'];
      a := [e',b]
      };
      a ;;

val delete = \a.
    case !a of {
        [e', a'] ->
        case !a' of {
              [f, g] ->
                  a := [e', g]
        }
    };
    a ;;


val next = \a.
    case !a of {
    [e,a'] -> a'
    } ;;

val get = \a.
    case !a of {
      [e,a'] -> e
    } ;;

val update = \e. \a.
    case !a of {
    [e', a']->
    a := [e, a']
    };
    a ;;

-- after completing the functions above
-- the code below should run

rec roundRobin = \ts. \a. case ts of {
    [] -> a,
    (0 : ts') -> (
        let val c = get (next a) in
        case c of {
            0 -> delete a ,
            _ -> update (c-1) (next a)
        };
        roundRobin ts' (next a)
    ),
    (t : ts') -> (
        case [a == (next a) , (get a) == 0] of {
            [true,true] -> update t a,
            _ -> insert t a
        };
        roundRobin ts' (next a)
    )
};;

rec toListAux = \h. \b. case b == h of {
        true -> [] ,
        false -> case !b of {
            [v, b'] -> v : (toListAux h b')
        }
};;

val cListToList = \a. case !a of {
    [v, a'] -> v : (toListAux a a')
};;

val testInsert1 =
    let val l = newCList "a" in
    insert "b" l;
    cListToList l == ["a", "b"]
;;

val testInsert2 =
    let val l = newCList "a" in
    insert "c" l;
    insert "b" l;
    cListToList l == ["a", "b", "c"]
;;

val cListToList = \a. case !a of {
    [v, a'] -> v : (toListAux a a')
};;

val testRRobin = \ts. cListToList (roundRobin ts (newCList 0));;

val tick = 0;;

val addTask = \n.n;;

val test1 = (testRRobin [tick]) == [0];;

val test2 = (testRRobin [addTask 3, addTask 4, tick, tick]) == [2, 3];;

val test3 = (testRRobin [addTask 6, tick, tick]) == [4];;

val test4 = (testRRobin [addTask 6, tick, tick,addTask 5]) == [5,4];;

val test5 = (testRRobin [addTask 6, tick, tick,addTask 5,tick]) == [3,5];;
